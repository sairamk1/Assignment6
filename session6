#Problem Statement 1:

#Write a function so that the columns of the output matrix are powers of the input
#vector.
#The order of the powers is determined by the increasing boolean argument. Specifically,
#when increasing is False, the i-th output column is the input vector raised element-wise
#to the power of N - i - 1.

#HINT: Such a matrix with a geometric progression in each row is named for Alexandre-
#Theophile Vandermonde.

import numpy as np
x = np.array([1, 2, 3, 6])
N = 4
np.vander(x, N)

#Output 
array([[  1,   1,   1,   1],
       [  8,   4,   2,   1],
       [ 27,   9,   3,   1],
       [216,  36,   6,   1]])
 
 np.column_stack([x**(N-1-i) for i in range(N)])
 
 #Output
 array([[  1,   1,   1,   1],
       [  8,   4,   2,   1],
       [ 27,   9,   3,   1],
       [216,  36,   6,   1]], dtype=int32)
       
 x = np.array([1, 2, 3, 6])
np.vander(x)
np.vander(x, increasing=True)

OUtPut
array([[  1,   1,   1,   1],
       [  1,   2,   4,   8],
       [  1,   3,   9,  27],
       [  1,   6,  36, 216]])
       
 np.linalg.det(np.vander(x))
 119.99999999999997
